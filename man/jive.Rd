% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/foxtrot.R
\name{foxtrot}
\alias{foxtrot}
\alias{bachata}
\alias{jive}
\title{Modify}
\usage{
foxtrot(.tbl, ..., .env = caller_env())

bachata(.tbl, ..., .name = "data", .env = caller_env())

jive(.tbl, ..., .env = caller_env())
}
\arguments{
\item{.tbl}{A data frame, most likely a grouped data frame}

\item{..., .env}{formulas for each column to create, and parent environment, see \code{\link[=ballet]{ballet()}}}

\item{.name}{Name of the packed column made by \code{bachata()}}
}
\value{
\itemize{
\item \code{foxtrot()} returns a list of tibbles, one per group of \code{.tbl}. This is
close in functionality to \code{\link[dplyr:group_map]{dplyr::group_map()}}.
\item \code{bachata()} returns a tibble that \code{\link[vctrs:vec_cbind]{vctrs::vec_cbind()}} the results of \code{\link[=polka]{polka()}} and
the result from \code{foxtrot()} as a list column
\item \code{jive()} row binds the results from \code{foxtrot()} and reconstructs the grouping structure.
This is similar in functionality to \code{dplyr::group_modify()}
}
}
\description{
Applies the \code{\link[=ballet]{ballet()}} with no restriction on the \code{\link[=vec_size]{vec_size()}} of the outputs.
}
\examples{
g <- group_by(iris, Species)

\dontrun{
if (requireNamespace("broom", quietly = TRUE)) {
  ### foxtrot() to return a list of tibbles

  # A list of tibbles with the `quantiles` column derived from the
  # formula on each group
  g \%>\%
    foxtrot(
      quantiles = ~quantile(Petal.Length, probs = c(0.25, 0.5, 0.75))
    )

  g \%>\%
    foxtrot(
      ~ broom::tidy(lm(Petal.Length ~ Sepal.Length))
    )

  ### bachata() to nest the results of foxtrot()

  # bachata() = polka() + a list column of 2 columns tibbles
  g \%>\%
    bachata(
       Sepal.Length = ~quantile(Sepal.Length, probs = c(0.25, 0.5, 0.75)),
       Sepal.Width  = ~quantile(Sepal.Width, probs = c(0.25, 0.5, 0.75)),
    )

  # because the formula is unnamed, the columns of the tibbles
  # generated by broom::tidy() are auto-spliced
  g \%>\%
    bachata(
      ~ broom::tidy(lm(Petal.Length ~ Sepal.Length))
    )

  ### jive()
  g \%>\%
    jive(
       Sepal.Length = ~quantile(Sepal.Length, probs = c(0.25, 0.5, 0.75)),
       Sepal.Width  = ~quantile(Sepal.Width, probs = c(0.25, 0.5, 0.75)),
    )

  # unnamed -> columns are spliced
  g \%>\%
    jive(
      ~ broom::tidy(lm(Petal.Length ~ Sepal.Length))
    )

  # named -> packed column
  g \%>\%
    jive(
      model = ~ broom::tidy(lm(Petal.Length ~ Sepal.Length))
    )
}
}
}
